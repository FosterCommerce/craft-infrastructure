
name: Deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    name: Deploy web app
    runs-on: ubuntu-18.04
    steps:
      - name: Set environment by branch
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "::set-env name=ENVIRONMENT::production"
              echo "::set-env name=WEBSERVER_HOSTS::${{secrets.PRODUCTION_WEBSERVER_HOSTS}}"
          else
              echo "::set-env name=ENVIRONMENT::staging"
              echo "::set-env name=WEBSERVER_HOSTS::${{secrets.STAGING_WEBSERVER_HOSTS}}"
          fi

      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.*') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn dependancies
        run: yarn install --frozen-lockfile

      - uses: actions/cache@v2
        id: fwork-build-cache
        with:
          path: web/dist
          key: ${{ runner.os }}-fwork-build-${{ hashFiles('packages/fwork/src/**/*.*') }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-fwork-build-

      - name: Build SPA frontend
        if: steps.fwork-build-cache.outputs.cache-hit != 'true'
        run: yarn workspace fwork build

      - uses: actions/cache@v2
        id: ansible-galaxy-cache
        with:
          path: ~/.ansible/roles/
          key: ${{ runner.os }}-ansible-galaxy-roles-${{ hashFiles('infrastructure/ansible/requirements.yaml') }}

      - name: Install Ansible requirements
        if: steps.ansible-galaxy-cache.outputs.cache-hit != 'true'
        run: ansible-galaxy install -r infrastructure/ansible/requirements.yaml

      - uses: webfactory/ssh-agent@v0.4.0
        if: ${{ env.ENVIRONMENT == 'staging' }}
        with:
          ssh-private-key: ${{secrets.STAGING_WEBSERVER_PRIVATE_KEY}}

      - uses: webfactory/ssh-agent@v0.4.0
        if: ${{ env.ENVIRONMENT == 'production' }}
        with:
          ssh-private-key: ${{secrets.PRODUCTION_WEBSERVER_PRIVATE_KEY}}

      - name: Create vault password
        run: echo "${{ secrets.VAULT_PASSWORD }}" > .vault_password

      - name: Deploy app to remote server
        run: |
          ansible-playbook \
            --inventory ./infrastructure/ansible/inventory.sh \
            --vault-password-file .vault_password \
            -e @infrastructure/ansible/vars/${{ env.ENVIRONMENT }}.yaml \
            -e @infrastructure/ansible/vars/${{ env.ENVIRONMENT }}-secrets.yaml \
            -e "commit_sha=${{ github.sha }}" \
            -u deploy \
            infrastructure/ansible/deploy.yaml
